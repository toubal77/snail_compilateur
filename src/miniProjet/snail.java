package miniProjet;

import java.awt.*;
import java.io.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.*;


public class snail extends javax.swing.JFrame {
    @Serial
    private static final long serialVersionUID = 1L;
    private javax.swing.JTextArea Result;
    private javax.swing.JLabel jLabel2;

    boolean checkSnlStart = false;
    boolean checkSnlClose = false;
    boolean checkStart = false;
    boolean checkFinish = false;
    boolean semantique = false;
    boolean syntaxique = false;
    boolean lexical = false;
    List<String> allIden = new ArrayList<String>();
    List<String> idenInt = new ArrayList<String>();
    List<String> idenFloat = new ArrayList<String>();

    public boolean isIdent(String str) {
        String regex = "^[a-z][_a-zA-Z_0-9]*$";
        return Pattern.matches(regex, str);
    }

    static boolean isint(String str) {
        String regex = "[0-9]+";
        return Pattern.matches(regex, str);

    }

    boolean isChaine(String str) {
        try {
            String regex = "^[a-zA-Z0-9' ]+$";
            return Pattern.matches(regex, str);
        } catch (NumberFormatException e) {
            return false;
        }
    }

    boolean isSpace(String str) {
        try {
            String regex = " +";
            return Pattern.matches(regex, str);
        } catch (NumberFormatException e) {
            return false;
        }
    }

    boolean isFloat(String str) {
        try {
            String regex = "[0-9]+.[0-9]+";
            return Pattern.matches(regex, str);
        } catch (NumberFormatException e) {
            return false;
        }
    }

    boolean isString(String str) {
        try {
            String regex = "[a-zA-Z0-9\\'-]+[a-zA-Z0-9]+";
            return Pattern.matches(regex, str);
        } catch (NumberFormatException e) {
            return false;
        }

    }

    /**
     * Creates new form snail
     */
    public snail() {
        initComponents();
        setResizable(false);
        setLocation(250, 100);
    }

    String chemin;

    boolean symbole(String str) {
        boolean bool;
        bool = "<".equals(str) || ">".equals(str) || "<=".equals(str) || ">=".equals(str) || "==".equals(str);
        return bool;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JLabel jLabel3 = new JLabel();
        JPanel jPanel1 = new JPanel();
        jLabel2 = new javax.swing.JLabel();
        // Variables declaration - do not modify//GEN-BEGIN:variables
        JButton charger_un_fichier = new JButton();
        JButton syntaxe = new JButton();
        JButton semantique = new JButton();
        JButton lexique = new JButton();
        JScrollPane jScrollPane1 = new JScrollPane();
        Result = new javax.swing.JTextArea();
        JLabel jLabel1 = new JLabel();

        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(null);

        jLabel2.setText("nom de fichier");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(180, 50, 190, 20);

        charger_un_fichier.setFont(new java.awt.Font("Tahoma", Font.PLAIN, 10)); // NOI18N
        charger_un_fichier.setText("CHARGER LE FICHIER");
        charger_un_fichier.addActionListener(this::Charger_un_fichierActionPerformed);
        jPanel1.add(charger_un_fichier);
        charger_un_fichier.setBounds(10, 40, 150, 40);

        syntaxe.setText("A.SYNTAXIQUE");
        syntaxe.addActionListener(this::SyntaxeActionPerformed);
        jPanel1.add(syntaxe);
        syntaxe.setBounds(10, 230, 150, 40);

        semantique.setText("A.SEMENTIQUE");
        semantique.addActionListener(this::SemantiqueActionPerformed);
        jPanel1.add(semantique);
        semantique.setBounds(10, 320, 150, 40);

        lexique.setText("A.LEXICAL");
        lexique.addActionListener(this::LexiqueActionPerformed);
        jPanel1.add(lexique);
        lexique.setBounds(10, 140, 150, 40);

        Result.setColumns(20);
        Result.setRows(5);
        Result.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(Result);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(416, 6, 380, 470);

        jLabel1.setIcon(new javax.swing.ImageIcon(Objects.requireNonNull(getClass().getResource("/miniprojet/snailm.png")))); // NOI18N
        jPanel1.add(jLabel1);
        jLabel1.setBounds(-6, -6, 830, 510);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE));

        pack();
    }

    private void Charger_un_fichierActionPerformed(java.awt.event.ActionEvent evt) {
        checkSnlStart = false;
        checkSnlClose = false;
        checkStart = false;
        checkFinish = false;
        allIden.clear();
        idenInt.clear();
        idenFloat.clear();
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        chemin = f.getAbsolutePath();
        jLabel2.setText(chemin);

    }
    private void LexiqueActionPerformed(java.awt.event.ActionEvent evt) {
        this.idenInt.clear();
        this.idenFloat.clear();
        Result.setText("");
        Path path = Paths.get(chemin);
        try {
            lexical = true;
            List<String> lignes = Files.readAllLines(path, StandardCharsets.ISO_8859_1);

            for (String ligne : lignes) {
                ligne = ligne.replace("<", " < ");
                ligne = ligne.replace(">", " > ");
                ligne = ligne.replace(" , ", ",");
                ligne = ligne.replace(", ", ",");
                ligne = ligne.replace(" ,", ",");
                ligne = ligne.replace("==", " == ");
                ligne = ligne.replace(">=", " >= ");
                ligne = ligne.replace("<=", " <= ");
                String[] mot = ligne.split("( )|(,)");

                for (int i = 0; i < mot.length; i++) {
                    switch (mot[i]) {
                        case "Snl_Start":
                            if(!mot[0].equals("%..")){
                                checkSnlStart = true;
                                Result.append("Snl_Start:Mot réservé début du programme\n");
                            }
                            break;
                        case "Snl_Int":
                            if(!mot[0].equals("%..")){
                                Result.append("Snl_Int    :Mot réservé pour déclaration d'un entier\n");
                            }
                            break;
                        case "SnlSt":
                            if(!mot[0].equals("%..")){
                                Result.append("SnlSt    :Mot réservé pour déclaration d'une chaîne de caractère\n");
                            }
                            break;
                        case "Snl_Real":
                            if(!mot[0].equals("%..")){
                                Result.append("Snl_Real    :Mot réservé pour déclaration d'un réel\n");
                            }
                            break;
                        case "Snl_Close":
                            if(!mot[0].equals("%..")){
                                checkSnlClose = true;
                                Result.append("Snl_Close   :Mot réservé fin du programme\n");
                            }
                            break;
                        case "Get":
                            if(!mot[0].equals("%..")){
                                Result.append(
                                        "Get      :Mot réservé pour l'affectation d'une valeur de variable a une autre\n");
                            }
                            i++;
                            break;
                        case "Set":
                            if(!mot[0].equals("%..")){
                                Result.append("Set     :Mot réservé pour l'affectation d'une valeur a une variable\n");
                            }
                            i++;
                            break;
                        case "If":
                            if(!mot[0].equals("%..")){
                                Result.append("If      :Mot réservé pour une condition\n");
                            }
                            i++;
                            break;
                        case "Else":
                            if(!mot[0].equals("%..")) {
                                Result.append("Else   :Sinon\n");
                            }
                            break;
                        case "Start":
                            if(!mot[0].equals("%..")){
                                checkStart = true;
                                Result.append("Start  :Début d'un bloc\n");
                            }
                            break;
                        case "Finish":
                            if(!mot[0].equals("%..")){
                                checkFinish = true;
                                Result.append("Finish   :Fin d'un bloc\n");
                            }
                            break;
                        case "%.":
                            Result.append("%.  : reserver pour fin ligne.\n");
                            break;
                        case "%..":
                            Result.append("%..  : reserver pour debut d'un commenteur.\n");
                            break;
                        case "%":
                            Result.append("%   : parenthèse \n");
                            break;
                        case "Snl_Put":
                            if(!mot[0].equals("%..")){
                                Result.append("Snl_Put   :Instruction d'affichage\n");
                            }
                            break;
                        default:

                            if (snail.isint(mot[i])) {
                                if(!mot[0].equals("%.."))
                                    Result.append(mot[i] + "  :entier\n");
                            } else if (this.isFloat(mot[i])) {
                                if(!mot[0].equals("%.."))
                                    Result.append(mot[i] + "  :réel\n");
                            }else if (this.isString(mot[i])) {
                                if(!mot[0].equals("%.."))
                                    Result.append(mot[i] + "  :chaîne de caractère\n");
                            } else if (this.symbole(mot[i])) {
                                if(!mot[0].equals("%.."))
                                    Result.append(mot[i] + "  :symbole \n");
                            }else if ("\"".equals(mot[i])) {
                                Result.append(mot[i] + "  :debut ou fin de chaine de caractere\n");
                            }else if (this.isSpace(mot[i])) {
                                Result.append(mot[i] + "  :espace\n");
                            } else if (this.isIdent(mot[i]) || !this.isIdent(mot[i])) {
                                if(!mot[0].equals("%.."))
                                    Result.append(mot[i] + "  :identificateur\n");
                            }

                    }

                }
            }
        } catch (IOException ex) {
            Logger.getLogger(snail.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void SyntaxeActionPerformed(java.awt.event.ActionEvent evt) {
        Result.setText("");
        Path path = Paths.get(chemin);
        try {
            if(lexical) {
                syntaxique = true;
                List<String> lignes = Files.readAllLines(path, StandardCharsets.ISO_8859_1);
                if (!checkSnlStart) {
                    Result.append("rak nasi Snl Start ya wahd lahmar\n");
                }
                if (!checkSnlClose) {
                    Result.append("rak nasi Snl Close ya wahd lahmar\n");
                }
                if (checkStart && (checkFinish == false)) {
                    Result.append("w bloc tabdah b Start w chkon adi ykamlah b finish nanak par exemple ? \n");
                }
                if (checkFinish && (checkStart == false)) {
                    Result.append("sahbi baghi nsa9sik min tkamal haja sama surement bditha aya dir tcho Start \n");
                }
                //      for (String ligne : lignes) {
                for (int j = 0; j < lignes.size(); j++) {
                    lignes.set(j, lignes.get(j).replace("<", " < "));
                    lignes.set(j, lignes.get(j).replace(">", " > "));
                    lignes.set(j, lignes.get(j).replace(" , ", ","));
                    lignes.set(j, lignes.get(j).replace(", ", ","));
                    lignes.set(j, lignes.get(j).replace(" ,", ","));
                    lignes.set(j, lignes.get(j).replace("==", " == "));
                    lignes.set(j, lignes.get(j).replace(">=", " >= "));
                    lignes.set(j, lignes.get(j).replace("<=", " <= "));
                    String[] mot = lignes.get(j).split("( )|(,)");
                    if ("%".equals(mot[0]) || "%.".equals(mot[0])) {
                        Result.append("roh t3alam taktab commentaire ki syadak f la ligne" + (j+1) + "\n\n");
                    }
                    for (int i = 0; i < mot.length; i++) {
                        switch (mot[i]) {
                            case "Snl_Start":
                                continue;
                            case "Snl_Int":
                                if (!mot[0].equals("%..")) {
                                    i++;
                                    List<String> variable = new ArrayList<>();
                                    while (i < mot.length) {
                                        if (this.isIdent(mot[i])) {
                                            variable.add(mot[i]);
                                            allIden.add(mot[i]);
                                        } else {
                                            if (!"%".equals(mot[i]) && !"%.".equals(mot[i]))
                                                Result.append(mot[i] + " :respecte pas la syntaxe d'un identificateur f la ligne"  + (j+1) + "\n\n");
                                        }
                                        i++;
                                    }
                                    idenInt = variable;

                                    if (!mot[i - 1].equals("%.")) {
                                        Result.append("ergg dir fin de ligne mat3ayinich f la ligne"  + (j+1) + "\n\n");
                                    }
                                }
                                continue;
                            case "Set":
                                i++;
                                if (!mot[0].equals("%..")) {
                                    if (this.isIdent(mot[i]) && (snail.isint(mot[i + 1]))) {

                                        if (allIden.contains(mot[i])) {
                                            if (!idenInt.contains(mot[i])) {
                                                Result.append(mot[i] + "    :tadi i real hada makan ya wahd lahmar f f la ligne"  + (j+1) + "\n\n");
                                            }
                                        } else {
                                            Result.append(mot[i] + " n'ai pas declare f la ligne" + (j+1) + "\n\n");
                                        }
                                    } else {
                                        if (!this.isIdent(mot[i])) {
                                            Result.append(mot[i] + "  :syntaxe please f la ligne"  + (j+1) + "\n\n");
                                        }
                                        if (this.isIdent(mot[i]) && !allIden.contains(mot[i])) {
                                            Result.append(mot[i] + " n'ai pas declare f la ligne"  + (j+1) + "\n\n");

                                        }
                                    }

                                    if (this.isIdent(mot[i]) && (this.isFloat(mot[i + 1]))) {

                                        if (allIden.contains(mot[i])) {
                                            if (!idenFloat.contains(mot[i])) {
                                                Result.append(mot[i] + "    :tadi i int hada makan ya wahd lahmar f la ligne"  + (j+1) + "\n\n");
                                            }
                                        } else {
                                            Result.append(mot[i] + " n'ai pas declare f la ligne"  + (j+1) + "\n\n");
                                        }
                                    } else {
                                        if (!this.isIdent(mot[i])) {
                                            Result.append(mot[i] + "  :syntaxe please f la ligne"  + (j+1) + "\n\n");
                                        }
                                        if (this.isIdent(mot[i]) && !allIden.contains(mot[i])) {
                                            Result.append(mot[i] + " n'ai pas declare f la ligne"  + (j+1) + "\n\n");
                                        }
                                    }
                                    while (i < mot.length) {
                                        i++;
                                    }
                                    if (!mot[i - 1].equals("%.")) {
                                        Result.append(mot[i - 1] + " dir rfgr fin de ligne mat3ayinich f la ligne"  + (j+1) + "\n\n");
                                    }
                                }
                                continue;
                            case "Snl_Real":
                                if (!mot[0].equals("%..")) {
                                    i++;
                                    List<String> real = new ArrayList<>();
                                    while (i < mot.length) {
                                        if (this.isIdent(mot[i])) {
                                            real.add(mot[i]);
                                            allIden.add(mot[i]);
                                        } else {
                                            if (!"%.".equals(mot[i]))
                                                Result.append(mot[i] + "  :syntaxe f real please f la ligne"  + (j+1) + "\n\n");
                                        }

                                        i++;
                                    }

                                    idenFloat = real;

                                    if (this.isIdent(mot[i - 1])) {
                                        if (mot[i].equals("%.")) {

                                        }
                                    }
                                    if (!mot[i - 1].equals("%.")) {
                                        Result.append(" dir fin de ligne mat3ayinich la ligne frgr f la ligne"  + (j+1) + "\n\n");
                                    }
                                }
                                continue;
                            case "If":
                                i++;
                                if (!"%".equals(mot[i])) {
                                    Result.append(" rak nasi debut wala fin ta3 parenthese f la ligne"  + (j+1) + "\n\n");
                                }
                                if (!allIden.contains(mot[i + 1])) {
                                    Result.append(mot[i + 1] + " marahach desclare f la ligne"  + (j+1) + "\n\n");
                                }
                                if (!this.isIdent(mot[i + 1])) {
                                    Result.append(mot[i + 1] + " t3ayi ya lahbib syntaxe hmbk f la ligne"  + (j+1) + "\n\n");
                                }
                                if (!this.symbole(mot[i + 3])) {
                                    Result.append(mot[i + 3] + " symbole chkon ydirha f la ligne"  + (j+1) + "\n\n");
                                }

                                if (!allIden.contains(mot[i + 5])) {
                                    Result.append(mot[i + 5] + " marahach desclaref la ligne"  + (j+1) + "\n\n");
                                }
                                if (!this.isIdent(mot[i + 5])) {
                                    Result.append(mot[i + 5] + " t3ayi ya lahbib syntaxe hmbk f la ligne"  + (j+1) + "\n\n");
                                }

                                if (!"%".equals(mot[i + 6])) {
                                    Result.append(" rak nasi debut wala fin ta3 parenthese f la ligne"  + (j+1) + "\n\n");
                                }

                                if (!"do".equals(mot[i + 7])) {
                                    Result.append(" do chkon ydirha f la ligne"  + (j+1) + "\n\n");
                                }

                                continue;
                            case "Else":

                                continue;
                            case "SnlSt":
                                if (!mot[0].equals("%..")) {
                                    i++;
                                    String chaine_de_caractere = "";
                                    if (!"\"".equals(mot[i]))
                                        Result.append(mot[i] + " syntaxe ya lahbib rak nasi \" rak taktaf fi text f la ligne"  + (j+1) + "\n\n");
                                    chaine_de_caractere = chaine_de_caractere + mot[i + 1] + " ";
                                    while (i < mot.length) {
                                        if (("\"".equals(mot[i]) == false) && ("%.".equals(mot[i]) == false)) {
                                            chaine_de_caractere = chaine_de_caractere + mot[i] + " ";
                                        }
                                        i++;
                                    }
                                    if (!this.isChaine(chaine_de_caractere))
                                        Result.append(" ha respecti kifach yakhatbo une chaine de caractere hambook f la ligne"  + (j+1) + "\n\n");
                                    if (!"\"".equals(mot[i - 2]))
                                        Result.append(mot[i - 2] + " wsh chikh min tabda katba kamalha b \" rak taktab fi text f la ligne"  + (j+1) + "\n\n");
                                    if (!"%.".equals(mot[i - 1]))
                                        Result.append(mot[i - 1] + " fin de ligne chkon ydirha ya kharaj rak taktab fi text f la ligne"  + (j+1) + "\n\n");

                                }
                                continue;
                            case "Start":

                                continue;
                            case "Get":
                                if (!mot[0].equals("%..")) {
                                    i++;
                                    if (this.isIdent(mot[i]) && "from".equals(mot[i + 1]) && this.isIdent(mot[i + 2])) {
                                        if (!allIden.contains(mot[i])) {
                                            Result.append(mot[i] + " n'ai pas declare f la ligne"  + (j+1) + "\n\n");
                                        }
                                        if (!allIden.contains(mot[i + 2])) {
                                            Result.append(mot[i] + " n'ai pas declare f la ligne"  + (j+1) + "\n\n");
                                        }
                                        if (idenFloat.contains(mot[i]) && idenInt.contains(mot[i + 2])) {
                                            Result.append(mot[i] + " raha real matnajamch tadi int f la ligne"  + (j+1) + "\n\n");
                                        }
                                        if (idenInt.contains(mot[i]) && idenFloat.contains(mot[i + 2])) {
                                            Result.append(mot[i] + " raha int matnajamch tadi real f la ligne"  + (j+1) + "\n\n");
                                        }
                                    } else {
                                        if (!"from".equals(mot[i + 1])) {
                                            Result.append("get variable from variable ya wahd lahmar f la ligne"  + (j+1) + "\n\n");
                                        }
                                        if (!this.isIdent(mot[i])) {
                                            Result.append(mot[i] + " ne respecte pas la syntaxe f la ligne"  + (j+1) + "\n\n");
                                        } else {
                                            if (!allIden.contains(mot[i])) {
                                                Result.append(mot[i] + " n'ai pas declare f la ligne"  + (j+1) + "\n\n");
                                            }
                                        }
                                        if (!this.isIdent(mot[i + 2])) {
                                            Result.append(mot[i + 2] + " ne respecte pas la syntaxe f la ligne"  + (j+1) + "\n\n");
                                        } else {
                                            if (!allIden.contains(mot[i + 2])) {
                                                Result.append(mot[i + 2] + " n'ai pas declare f la ligne"  + (j+1) + "\n\n");
                                            }
                                        }
                                    }
                                    if (!mot[i - 1].equals("%.")) {
                                        Result.append("  dir fin de ligne mat3ayinich dfgf f la ligne"  + (j+1) + "\n\n");
                                    }
                                }
                                continue;
                            case "Finish":

                                continue;
                            case "Snl_Put":
                                if (!mot[0].equals("%..")) {
                                    i++;

                                    if (this.isIdent(mot[i])) {
                                        if (!allIden.contains(mot[i])) {
                                            while (i < mot.length) {
                                                i++;
                                            }
                                            if ("\"".equals(mot[i - 2])) {
                                                Result.append("nta tkamal katba bsh matabdach b \" f la ligne"  + (j+1) + "\n\n");
                                            }
                                            if (!"%.".equals(mot[i - 1])) {
                                                Result.append("fin de ligne chkon ydirha ya kharaj lawla w talya ta3ak f la ligne"  + (j+1) + "\n\n");
                                            }
                                            if (!"%.".equals(mot[i - 1]) && !"\"".equals(mot[i - 2])) {
                                                Result.append(mot[i - 2] + " n'ai pas declare f la ligne"  + (j+1) + "\n\n");
                                            }
                                        }
                                    } else {

                                        if (!"\"".equals(mot[i]))
                                            Result.append(mot[i] + " syntaxe ya lahbib f la ligne"  + (j+1) + "\n\n");

                                        while (i < mot.length) {
                                            i++;
                                        }
                                        if (!"\"".equals(mot[i - 2]))
                                            Result.append(mot[i - 2] + " wsh chikh min tabda katba kamalha b \" f la ligne"  + (j+1) + "\n\n");
                                        if (!"%.".equals(mot[i - 1]))
                                            Result.append(mot[i - 1] + " fin de ligne chkon ydirha ya kharaj f la ligne"  + (j+1) + "\n\n");

                                    }
                                }
                                continue;
                            case "%..":

                                continue;
                            case "Snl_Close":

                                break;

                        }
                    }

                }
            }else{
                Result.append("\n\n\tvous devez effectuer l'analyse lexicale");
            }
        } catch (IOException ex) {
            Logger.getLogger(snail.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void SemantiqueActionPerformed(java.awt.event.ActionEvent evt) {
        Result.setText("");
        Path path = Paths.get(chemin);
        try {
            if (syntaxique && lexical) {
                semantique = true;
                List<String> lignes = Files.readAllLines(path, StandardCharsets.ISO_8859_1);
                for (String ligne : lignes) {
                    ligne = ligne.replace("<", " < ");
                    ligne = ligne.replace(">", " > ");
                    ligne = ligne.replace(" , ", ",");
                    ligne = ligne.replace(", ", ",");
                    ligne = ligne.replace(" ,", ",");
                    ligne = ligne.replace("==", " == ");
                    ligne = ligne.replace(">=", " >= ");
                    ligne = ligne.replace("<=", " <= ");
                    String[] mot = ligne.split("( )|(,)");
                    for (int i = 0; i < mot.length; i++) {
                        switch (mot[i]) {
                            case "Snl_Start":
                                Result.append("main(){\n");
                                continue;
                            case "Snl_Int":
                                i++;
                                List<String> sint = new ArrayList<>();
                                while (this.isIdent(mot[i])) {
                                    sint.add(mot[i]);
                                    i++;
                                }
                                if (this.isIdent(mot[i - 1])) {
                                    if (mot[i].equals("%.")) {
                                        Result.append("int ");
                                        for (int j = 0; j < sint.size(); j++) {
                                            if (j == sint.size() - 1) {
                                                Result.append(sint.get(j));
                                            } else {
                                                Result.append(sint.get(j) + ",");
                                            }
                                        }
                                        Result.append(";\n");
                                    }
                                }
                                break;
                            case "Set":
                                i++;
                                if (this.isIdent(mot[i])
                                        && (snail.isint(mot[i + 1]) || this.isFloat(mot[i + 1]))) {
                                    Result.append(mot[i] + " = " + mot[i + 1] + ";\n");
                                }
                                continue;
                            case "Snl_Real":
                                i++;
                                List<String> sreal = new ArrayList<>();
                                while (this.isIdent(mot[i])) {
                                    sreal.add(mot[i]);
                                    i++;
                                }
                                if (this.isIdent(mot[i - 1])) {
                                    if (mot[i].equals("%.")) {
                                        Result.append("float ");
                                        for (int j = 0; j < sreal.size(); j++) {
                                            if (j == sreal.size() - 1) {
                                                Result.append(sreal.get(j));
                                            } else {
                                                Result.append(sreal.get(j) + ",");
                                            }
                                        }
                                        Result.append(";\n");
                                    }
                                }
                                continue;
                            case "Start":
                                Result.append("{\n");
                                continue;
                            case "Get":
                                i++;
                                if (this.isIdent(mot[i]) && "from".equals(mot[i + 1])
                                        && this.isIdent(mot[i + 2])) {
                                    Result.append(mot[i] + " = " + mot[i + 2] + ";\n");
                                }
                                continue;
                            case "Finish":
                                Result.append("}\n");
                                continue;
                            case "Snl_Put":
                                i++;
                                if (this.isIdent(mot[i])) {
                                    Result.append("System.out.println(" + mot[i] + ");\n");
                                } else {
                                    Result.append("System.out.println(" + mot[i] + ");\n");
                                }

                                continue;
                            case "%..":
                                i++;
                                Result.append("//" + Arrays.toString(ligne.split("%..")) + "\n");
                                continue;

                            case "If":
                                i++;
                                Result.append("if(" + mot[i + 1] + mot[i + 2] + mot[i + 3] + ")\n");
                                continue;
                            case "Else":
                                Result.append("else\n");
                                continue;
                            case "Snl_Close":
                                Result.append("} ");
                                break;

                        }
                    }

                }
            }else{
                Result.append("\n\n\tvous devez effectuer l'analyse \n \t lexicale & syntaxique");
            }
        }

        catch (IOException ex) {
            Logger.getLogger(snail.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void main(String[] args) {

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(snail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(() -> new snail().setVisible(true));
    }


}